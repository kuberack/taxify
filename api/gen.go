//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// Defines values for VehicleModel.
const (
	Hatchback VehicleModel = "hatchback"
	Sedan     VehicleModel = "sedan"
	Suv       VehicleModel = "suv"
)

// Defines values for PostSignupOauthParamsProvider.
const (
	Email  PostSignupOauthParamsProvider = "email"
	Github PostSignupOauthParamsProvider = "github"
	Google PostSignupOauthParamsProvider = "google"
	Phone  PostSignupOauthParamsProvider = "phone"
)

// Defines values for PostSignupOauthParamsType.
const (
	PostSignupOauthParamsTypeAdmin  PostSignupOauthParamsType = "admin"
	PostSignupOauthParamsTypeDriver PostSignupOauthParamsType = "driver"
	PostSignupOauthParamsTypeRider  PostSignupOauthParamsType = "rider"
)

// Defines values for PostSignupPhoneParamsType.
const (
	PostSignupPhoneParamsTypeAdmin  PostSignupPhoneParamsType = "admin"
	PostSignupPhoneParamsTypeDriver PostSignupPhoneParamsType = "driver"
	PostSignupPhoneParamsTypeRider  PostSignupPhoneParamsType = "rider"
)

// Vehicle defines model for Vehicle.
type Vehicle struct {
	Id           *int          `json:"id,omitempty"`
	Model        *VehicleModel `json:"model,omitempty"`
	Registration *string       `json:"registration,omitempty"`
}

// VehicleModel defines model for Vehicle.Model.
type VehicleModel string

// PostSignupOauthParams defines parameters for PostSignupOauth.
type PostSignupOauthParams struct {
	// Provider The name of the OAuth provider
	Provider PostSignupOauthParamsProvider `form:"provider" json:"provider"`

	// Type The type of the signup
	Type PostSignupOauthParamsType `form:"type" json:"type"`
}

// PostSignupOauthParamsProvider defines parameters for PostSignupOauth.
type PostSignupOauthParamsProvider string

// PostSignupOauthParamsType defines parameters for PostSignupOauth.
type PostSignupOauthParamsType string

// PostSignupPhoneJSONBody defines parameters for PostSignupPhone.
type PostSignupPhoneJSONBody struct {
	Phone *int `json:"phone,omitempty"`
}

// PostSignupPhoneParams defines parameters for PostSignupPhone.
type PostSignupPhoneParams struct {
	// Type The type of the signup
	Type PostSignupPhoneParamsType `form:"type" json:"type"`
}

// PostSignupPhoneParamsType defines parameters for PostSignupPhone.
type PostSignupPhoneParamsType string

// PatchSignupPhoneUserIdVerifyJSONBody defines parameters for PatchSignupPhoneUserIdVerify.
type PatchSignupPhoneUserIdVerifyJSONBody struct {
	Otp *int `json:"otp,omitempty"`
}

// PostSignupPhoneJSONRequestBody defines body for PostSignupPhone for application/json ContentType.
type PostSignupPhoneJSONRequestBody PostSignupPhoneJSONBody

// PatchSignupPhoneUserIdVerifyJSONRequestBody defines body for PatchSignupPhoneUserIdVerify for application/json ContentType.
type PatchSignupPhoneUserIdVerifyJSONRequestBody PatchSignupPhoneUserIdVerifyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the vehicles associated with driver
	// (GET /drivers/{userId}/vehicles)
	GetDriversUserIdVehicles(w http.ResponseWriter, r *http.Request, userId int)
	// Signup using OAuth
	// (POST /signup/oauth)
	PostSignupOauth(w http.ResponseWriter, r *http.Request, params PostSignupOauthParams)
	// Signup using phone
	// (POST /signup/phone)
	PostSignupPhone(w http.ResponseWriter, r *http.Request, params PostSignupPhoneParams)
	// Verify using OTP
	// (PATCH /signup/phone/{userId}/verify)
	PatchSignupPhoneUserIdVerify(w http.ResponseWriter, r *http.Request, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDriversUserIdVehicles operation middleware
func (siw *ServerInterfaceWrapper) GetDriversUserIdVehicles(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDriversUserIdVehicles(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSignupOauth operation middleware
func (siw *ServerInterfaceWrapper) PostSignupOauth(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSignupOauthParams

	// ------------- Required query parameter "provider" -------------

	if paramValue := r.URL.Query().Get("provider"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "provider"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "provider", r.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// ------------- Required query parameter "type" -------------

	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSignupOauth(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSignupPhone operation middleware
func (siw *ServerInterfaceWrapper) PostSignupPhone(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSignupPhoneParams

	// ------------- Required query parameter "type" -------------

	if paramValue := r.URL.Query().Get("type"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "type"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSignupPhone(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchSignupPhoneUserIdVerify operation middleware
func (siw *ServerInterfaceWrapper) PatchSignupPhoneUserIdVerify(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchSignupPhoneUserIdVerify(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/drivers/{userId}/vehicles", wrapper.GetDriversUserIdVehicles)
	m.HandleFunc("POST "+options.BaseURL+"/signup/oauth", wrapper.PostSignupOauth)
	m.HandleFunc("POST "+options.BaseURL+"/signup/phone", wrapper.PostSignupPhone)
	m.HandleFunc("PATCH "+options.BaseURL+"/signup/phone/{userId}/verify", wrapper.PatchSignupPhoneUserIdVerify)

	return m
}
